jobs:
  include:
    - stage: build
      sudo: required
      services:
        - docker
      env:
        DOCKER_COMPOSE_VERSION: 1.27.4
      before_install:
        - sudo rm /usr/local/bin/docker-compose
        - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
        - chmod +x docker-compose
        - sudo mv docker-compose /usr/local/bin
      before_script:
        - docker-compose up -d --build
      script:
        - docker-compose run api rake db:create 
        - docker-compose run api rake db:migrate
      after_script:
        - docker-compose down
    - stage: test-api
      script:
        - docker-compose run api rake db:create 
        - docker-compose run api rake db:migrate
        - docker-compose run api bundle exec rails test
    - stage: test-client
      script:
        - docker-compose run client yarn run test:unit
    - stage: code-quality
      env:
        global:
          - CC_TEST_REPORTER_ID=ba374f9b14633ae4fd7c61530fbf11f7e1f9c5b3c20abbea94033a99f46803a2
      language: ruby
      rvm:
      - 2.5.7
      before_script:
        - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        - chmod +x ./cc-test-reporter
        - ./cc-test-reporter before-build
        - docker-compose run api rake db:create 
        - docker-compose run api rake db:migrate
      script:
      - docker-compose run api bundle exec rake
      - docker-compose run client yarn run test:unit
      after_script:
        - ./cc-test-reporter format-coverage -t simplecov -o coverage/codeclimate.api.json api/coverage/.resultset.json # Format backend coverage
        - ./cc-test-reporter format-coverage -t lcov -o coverage/codeclimate.client.json client/coverage/lcov.info  # Format frontend coverage
    - stage: deploy
      deploy:
        provider: heroku
        api_key:
          secure: "Rr4RHHifSB3kXan4vZYrkI9ROB7Y7AXOr7Uu8SPbx0D0zLrURJHx+pOd2V/MIyzHsm6lKeVFU+le4RyGIHdya4HK0Qo+0pqCpddoWRiTZb7IQ4o8cxkNkGF0NMS1JQmLR/kiLw1aJuC41ToixithJti6UAZfn/2T2Jo3ap9ilcUYcKOzYFERu/7RmLQhMeNETFhtjcav7iXOSnyTtnRtM25uq58I2HfzwYdpaiNWNo3VFt+x3qV1AR77cBTDp+2cNhughyY5ILP1IoajEg/1GY6fP1vXTeGJS9XCLNEd4vw4nINhK2F8kNT6rUQ6CznZkkUGVWu0lIv8nmg03SfFjnxHJ62SwgMAKj1yj1oAIChcAhX6PrMfesRNhDlCM7rZpurYCY0PNLFADvZNqWcjT/N31zsfr0K6u6CmxI2seSzz5oFJD8DzrFk8ybocDUZc5JEOibuTQ6PGGBzxvlXiNYkgLc5Orm+o87cPwe/NiHjuugJmhN2dafwme/KPSuSMv1aUnFe56AXuwZ5Mh7m0GJlijszMjVOgug7QCOETGUwUhx7ZyuEI91QVml2hPO72Z7KbOazOQ/ti934nYPAA/qEmbpfNHDoXh5Jsd+cz8/No/t6eimqiC82PIrDqJvU5TqzF1JH1F/pKE1Dewj2mRexskmUamibXhj3Q+w9iyGs="
        on: master